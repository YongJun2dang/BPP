#include "lyongmotor.h"
#include <QApplication>
#include <stdio.h>

#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <sys/signal.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/time.h>
#include "main.h"

#include <QtWidgets>

LYongMotor::LYongMotor()
{
    int i;
    for(i=0;i<3;i++)
    {
        axisToUsbNumber[i] = -1;
    }
    for(i=0;i<LengthUsbNo;i++)
    {
        usbNoToFileDesc[i] = -1;
    }

}

// https://stackoverflow.com/questions/5877504/access-c-queue-elements-like-an-array
void LYongMotor::run()
{
    while(true)
    {
        for(int i=0;i<LengthUsbNo;i++)
        {
            UpdateFromSerial(i);
            ParsingSerial(i);
        }
        usleep(50);

    }

}
int LYongMotor::UpdateFromSerial(int usbNo)
{
    int fd = usbNoToFileDesc[usbNo];
    if(fd<0) return 0;

    char buf[128];
    int n = read(fd, buf, 128);
    if(n<0) return 0;
    for(int i=0;i<n;i++)
    {
        myQueue[usbNo].push(buf[i]);
    }
    return 0;
}
int LYongMotor::ParsingSerial(int usbNo)
{
    while(true)
    {
        int n = myQueue[usbNo].size();
        if(n <17) break;


        if(myQueue[usbNo].c[0] != 184 ||
           myQueue[usbNo].c[1] != 183)
        {
            myQueue[usbNo].pop();
            continue;
        }

        if(myQueue[usbNo].c[0] == 184 &&
           myQueue[usbNo].c[1] == 183)
        {
            myQueue[usbNo].pop();
            myQueue[usbNo].pop();
            // rest of 5 letters
            char data[15];
            for(int i=0;i<15;i++)
            {
                data[i] = myQueue[usbNo].front();
                myQueue[usbNo].pop();
            }
        }
        else
        {

        }

    }

    return 0;
}




int LYongMotor::WriteMotorData(int axis, char* command, int len)
{
    int i;
    char byChkSend = 0;
    for(i=0;i<len-1;i++)
    {
        byChkSend += command[i];
    }
    byChkSend = (~byChkSend) + 1;
    command[len-1] = byChkSend;

    int myfd = GetFileDescriptor(axis);
    if(myfd<0)
    {
        return 1; // fail
    }
    int retv = write(myfd, command, len);

    return 0;
}





// absoluve movement
int LYongMotor::MoveInPulse(int axis, float velocity, float position)
{
    int motor_axis = axis + 100;
    char command[] = {
        183
        , 184
        , (char)motor_axis
        , 220
        , 6
        , 100
        , 0
        , 0
        , 0
        , 0
        , 0
        , 0 // checksum
    };

    WriteMotorData(axis, command, sizeof(command));
    return 0;
}

//relative
int LYongMotor::MoveRInPulse(int axis, float distance)
{
    int motor_axis = axis + 100;

    char command[] = {
        183
        , 184
        , (char)motor_axis
        , 219
        , 6
        , 100
        , 0
        , 0
        , 0
        , 0
        , 0
        , 232 // checksum
    };
    WriteMotorData(axis, command, sizeof(command));
    return 0;
}

//relative(Reverse)
int LYongMotor::ReverseMoveInPulse(int axis, float distance)
{
    int motor_axis = axis + 100;

    char command[] = {
        183
        , 184
        , (char)motor_axis
        , 219
        , 6
        , 156
        , 255
        , 255
        , 255
        , 0
        , 0
        , 179 // checksum
    };
    WriteMotorData(axis, command, sizeof(command));
    return 0;
}
int LYongMotor::Stop(int axis)
{
    int myfd = GetFileDescriptor(axis);
    if(myfd<0)
    {
        return 1; // fail
    }

    int motor_axis = axis + 100;

    char stop_1[] = {
        0xb7,
        0xb8,
        (char)motor_axis,
        130,
        2,
        0,
        0,
        169  // checksum

    };
    WriteMotorData(axis, stop_1, sizeof(stop_1));



    return 0;
}

// jog
int LYongMotor::MoveCont(int axis, float velocity)
{
    int myfd = GetFileDescriptor(axis);
    if(myfd<0)
    {
        return 1; // fail
    }

    char start_1[] = { 0xb7, 0xb8, 100,130, 2, 100, 0, 69};
    WriteMotorData(axis, start_1, sizeof(start_1));
    return 0;
}


int LYongMotor::IsMoving(int axis)
{
    int myfd = GetFileDescriptor(axis);
    return 0;
}
int LYongMotor::GetFileDescriptor(int axis)
{
    if(axisToUsbNumber[axis]<0) return -1;
    int usbNumber = axisToUsbNumber[axis];

    if(usbNoToFileDesc[usbNumber]<0) return -1;
    int fd = usbNoToFileDesc[usbNumber];

    return fd;
}

int LYongMotor::MyOpenAll()
{
    int i;
    for(int i=0;i<16;i++)
    {
        MyOpen(i);
    }
    start();
    return 0;
}


int LYongMotor::MyOpen(int usbNumber)
{
    char location[128];
    sprintf(location, "/dev/ttyUSB%d", usbNumber);

    int fd_1;
    fd_1 = open(location, O_NONBLOCK | O_RDWR | O_NOCTTY );

    if(fd_1>1)
    {
        usbNoToFileDesc[usbNumber] = fd_1;
        printf("\n Connect! \n");
    }
    else
    {
        close(fd_1);
        return -1;
    }

    set_interface_attribs (fd_1, B9600, 0);

    // get id from fd_1

    int idid =100;

    // Axis   Yong Motor ID     Real Axis
    // 0      100               X
    // 1      101               Y
    // 2      102               Z
    if(idid == 100) axisToUsbNumber[0] = usbNumber;
    else if(idid == 101) axisToUsbNumber[1] = usbNumber;
    else if(idid == 102) axisToUsbNumber[2] = usbNumber;
    else
    {
        // unhandled motor
        printf("Un handled motor\n", idid);

    }


}


int LYongMotor::YongReadData(int usbNumber)
{
    QString YongResult;
    char setMotorID[] =
    {
        183
        ,184
        ,100
        ,149
        ,2
        ,170
        ,1
        ,0x00 // checksum
    };
    WriteMotorData(usbNumber, setMotorID, sizeof(setMotorID));

    // Write Monitor PID.


    int myfd = GetFileDescriptor(usbNumber);
    char buf[256];
    int length = 0;
    int YongMonitor = read(myfd, buf, length);
    if(YongMonitor <0)
    {
        length += YongMonitor ;

    }

    for(int i = 0; i < length ; i++)
    {
        YongResult.sprintf("Data[%d] is : %d. \n",i,buf[i]);
    }



}

float LYongMotor::GetPosition(int axis)
{
    char pid_ref_posi[] =
    {
        183
        ,184
        ,100
        ,4
        ,1
        ,230
        ,0x00 // checksum
    };
    WriteMotorData(axis, pid_ref_posi, sizeof(pid_ref_posi));

    return 0;

}
